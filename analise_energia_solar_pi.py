import pandas as pd
import os

# --- 1. Configura√ß√£o dos Arquivos ---
pasta_dados = os.path.dirname(os.path.abspath(__file__))
arquivo_principal = "capacidade_instalada.xlsx"
caminho_arquivo = os.path.join(pasta_dados, arquivo_principal)

arquivo_saida = "dados_para_mapa.csv"
caminho_saida = os.path.join(pasta_dados, arquivo_saida)

# --- 2. Carregar e Filtrar os Dados do Excel ---
try:
    df = pd.read_excel(caminho_arquivo)
    print("‚úÖ Arquivo Excel 'capacidade_instalada.xlsx' carregado com sucesso.")

    # --- PASSO DE CORRE√á√ÉO: Limpeza dos Nomes das Colunas ---
    # Remove espa√ßos em branco do in√≠cio e do fim de todos os nomes de colunas
    df.columns = df.columns.str.strip()
    print("üßπ Nomes das colunas limpos e padronizados.")
    print("üìã Colunas encontradas ap√≥s a limpeza:", df.columns.tolist())

    print("\nüîç Aplicando filtros para o mapa...")

    # Aplica todos os filtros que voc√™ definiu
    df_filtrado = df[
        (df['uf'] == 'PI') &
        (df['fonte_resumo'] == 'Fotovoltaica') &
        (df['classe'].isin(['Residencial', 'Rural'])) &
        (df['subgrupo'].isin(['B1', 'B2'])) &
        (df['modalidade'].isin(['Gera√ß√£o na pr√≥pria UC', 'Autoconsumo remoto', 'Gera√ß√£o compartilhada'])) &
        (df['mini_micro'].isin(['MicroGD'])) &
        (df['segmento'].isin(['residencial', 'residencial_remoto']))
    ].copy()
    
    print(f"   - Total de registros encontrados para o Piau√≠ com os filtros: {len(df_filtrado)}")

    # --- 3. Processar e Agregar os Dados por Munic√≠pio ---
    print("\nüîÑ Agregando o N√öMERO DE SISTEMAS por munic√≠pio...")
    
    dados_municipios = (
        df_filtrado.groupby('municipio')
        .agg(
            Numero_Sistemas=('n_sistemas', 'sum')
        )
        .reset_index()
    )

    dados_municipios = dados_municipios.sort_values(by='Numero_Sistemas', ascending=False)

    # --- 4. Salvar o Resultado ---
    dados_municipios.to_csv(caminho_saida, index=False, sep=';', encoding='utf-8-sig')

    print(f"\n‚úÖ Arquivo '{arquivo_saida}' pronto para o mapa foi gerado com sucesso!")
    print("\nüèôÔ∏è Top 10 munic√≠pios por N√∫mero de Sistemas:")
    print(dados_municipios.head(10))

except FileNotFoundError:
    print(f"‚ùå ERRO: O arquivo '{arquivo_principal}' n√£o foi encontrado.")
except KeyError as e:
    print(f"‚ùå ERRO de Chave (Coluna n√£o encontrada): {e}")
    print("   Verifique se o nome da coluna na lista impressa acima corresponde ao nome usado no filtro.")
except Exception as e:
    print(f"‚ö†Ô∏è Erro inesperado: {e}")